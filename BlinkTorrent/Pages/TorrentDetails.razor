@page "/torrentdetails"
@page "/torrentdetails/{Key}"

@using MonoTorrent
@using QueueTorrent
@inject ITorrentService torrentService
@inject NavigationManager NavigationManager

<PageTitle>Torrent details</PageTitle>

        <MudStack>
            <MudCard Elevation="2">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Secondary">I</MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@Torrent.Name</MudText>
                        <MudText Typo="Typo.body2">Properties</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid Spacing="1">
                        <MudItem xs="3">
                            <MudTextField Value="@Torrent.State" Label="State" ReadOnly="true" Variant="Variant.Filled" />
                        </MudItem>
                        <MudItem xs="3">
                            <MudTextField Value="@Torrent.Progress" Label="Progress" ReadOnly="true" Variant="Variant.Filled" />
                        </MudItem>
                        <MudItem xs="3">
                            <MudTextField Value="@Torrent.SeedRatio" Label="Seed ratio" ReadOnly="true" Variant="Variant.Filled" />
                        </MudItem>
                        <MudItem xs="3">
                            <MudTextField Value="@Torrent.QueuePosition" Label="Queue Position" ReadOnly="true" Variant="Variant.Filled"/>
                        </MudItem>
                        <MudItem xs="3">
                            <MudTextField Value="Torrent.NumberOfSeeders" Label="Seeders" ReadOnly="true" Variant="Variant.Filled" />
                        </MudItem>
                        <MudItem xs="3">
                            <MudTextField Value="Torrent.NumberOfLeechers" Label="Leechers" ReadOnly="true" Variant="Variant.Filled" />
                        </MudItem>
                        <MudItem xs="3">
                            <MudTextField Value="Torrent.DownloadRate" Label="Dl speed" ReadOnly="true" Variant="Variant.Filled" />
                        </MudItem>
                        <MudItem xs="3">
                            <MudTextField Value="Torrent.UploadRate" Label="Ul speed" ReadOnly="true" Variant="Variant.Filled" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Value=@(String.IsNullOrEmpty(Torrent.V1InfoHash) ? "<none>" : Torrent.V1InfoHash) Label="V1 InfoHash" ReadOnly="true" Variant="Variant.Filled" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Value=@(String.IsNullOrEmpty(Torrent.V2InfoHash) ? "<none>" : Torrent.V2InfoHash) Label="V2 InfoHash" ReadOnly="true" Variant="Variant.Filled" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudSimpleTable>
                        <thead>
                            <tr>
                                <th>Path</th>
                                <th>Size</th>
                                <th>Progress</th>
                                <th>Priority</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var file in Torrent.Files)
                            {
                                <UpdateOnPropertyChange Item=@file>
                                    <tr @key=file.Key>
                                        <td>@file.Path</td>
                                        <td>@(Utils.ConvertSize(file.Length))</td>
                                        <td><MudProgressLinear Min="0.0" Max="1.0" Value="@file.Progress" Size="Size.Small"></MudProgressLinear></td>
                                        <td>
                                            <select @bind="file.Priority">
                                                @foreach(var value in Enum.GetValues<Priority>())
                                                {
                                                    <option value="@value" selected="@(file.Priority == value)">@value</option>
                                                }
                                            </select>
                                        </td>
                                    </tr>
                                </UpdateOnPropertyChange>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudCardContent>
            </MudCard>
        </MudStack>

@*        <h3>@Torrent.Name</h3>
        <br />
        <span>Key: @Torrent.Key</span>
        <br />
        <span>V1 InfoHash: @Torrent.V1InfoHash</span>
        <br />
        <span>V2 InfoHash: @Torrent.V2InfoHash</span>
        <br />
        <span>QueuePosition: @Torrent.QueuePosition</span>
        <br />
        <span>Progress: @Torrent.Progress</span>
        <br />
        <span>SeedRatio: @Torrent.SeedRatio</span>
        <br />
        <span>Busy: @Torrent.IsBusy</span>
        <br />
        <span>State: @Torrent.State</span>
        <br />
        <span>RawState: @Torrent.RawState</span>
        <br />
        <span>Complete: @Torrent.Complete</span>
        <br />
        <span>DownloadSpeed: @Torrent.DownloadRate</span>
        <br />
        <span>UploadSpeed: @Torrent.UploadRate</span>
        <br />
        <span>TotalBytesDownloaded: @(Utils.ConvertSize(Torrent.TotalBytesReceived))</span>
        <br />
        <span>TotalBytesUploaded: @(Utils.ConvertSize(Torrent.TotalBytesSent))</span>
        <br />
        <span>NumberOfLeechers: @Torrent.NumberOfLeechers</span>
        <br />
        <span>NumberOfSeeders: @Torrent.NumberOfSeeders</span>
        <br />
        <span>Error: @Torrent.Error</span>
        </UpdateOnPropertyChange>
*@

@code {
    [Parameter]
    public string? Key { get; set; }

    private TorrentItem Torrent { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if(TorrentKey.TryParse(Key, out var torrentKey))
        {
            Torrent = torrentService.Torrents.First(x => x.Key.Equals(torrentKey));
        }
        await Task.CompletedTask;
    }
}
