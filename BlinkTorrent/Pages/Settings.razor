@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Net;
@inject ITorrentService TorrentService
@page "/settings"

<PageTitle>Settings</PageTitle>

<MudForm @ref="form" @bind-IsValid="@success" Model="settings" @bind-Errors="@errors">
	<MudGrid>
		<MudItem xs="12" sm="6">
			<MudPaper Class="pa-4">
				<MudText Typo="Typo.h4">Network</MudText>
				<MudDivider/>
				<MudTextField T="IPEndPoint" Label="Listen endpoint" @bind-Value=settings.ListenEndPoint Converter=ipendpointconverter Clearable=true HelperText="use 0.0.0.0:55123 to listen on port 55123 on all nics" HelperTextOnFocus=true />
				<MudTextField T="IPEndPoint" Label="Dht endpoint" @bind-Value=settings.DhtEndPoint Converter=ipendpointconverter Clearable=true HelperText="use 0.0.0.0:55123 to listen on port 55123 on all nics" HelperTextOnFocus=true />
				<MudCheckBox Size=Size.Small Label="Allow port forwarding" @bind-Checked=settings.AllowPortForwarding />
				<MudCheckBox Size=Size.Small Label="Allow local peer discovery" @bind-Checked=settings.AllowLocalPeerDiscovery />
			</MudPaper>
		</MudItem>
		<MudItem xs="12" sm="6">
			<MudPaper Class="pa-4">
				<MudText Typo="Typo.h4">Folders</MudText>
				<MudDivider />
				<MudStack>
					<MudCheckBox Size=Size.Small Label="Use hot folder" @bind-Checked=settings.UseTorrentHotFolder />
					<MudCheckBox Size=Size.Small Label="Delete hot folder torrent after adding" @bind-Checked=settings.DeleteHotFolderTorrentAfterAdding Disabled=!settings.UseTorrentHotFolder />
					<MudTextField Label="Download folder" @bind-Value=settings.DownloadFolder Required=true />
					<MudTextField Label="Hot folder" @bind-Value=settings.TorrentHotFolder Disabled=!settings.UseTorrentHotFolder Required=true />
				</MudStack>
			</MudPaper>
		</MudItem>
		<MudItem xs="12" sm="6">
			<MudPaper Class="pa-4">
				<MudText Typo="Typo.h4">Speed Limits</MudText>
				<MudDivider />
				<MudStack>
					<MudNumericField Label="Maximum download rate (Bps)" @bind-Value=settings.MaximumDownloadRate Min="0" HelperText="use 0 for unrestricted" HelperTextOnFocus=true />
					<MudNumericField Label="Maximum upload rate (Bps)" @bind-Value=settings.MaximumUploadRate Min="0" HelperText="use 0 for unrestricted" HelperTextOnFocus=true />
				</MudStack>
			</MudPaper>
		</MudItem>
		<MudItem xs="12" sm="6">
			<MudPaper Class="pa-4">
				<MudText Typo="Typo.h4">Queue and Seed Limits</MudText>
				<MudDivider/>
				<MudStack>
					<MudNumericField Label="Maximum active downloads" @bind-Value=settings.MaximumActiveDownloads Min="0" />
					<MudNumericField Label="Maximum upload uploads" @bind-Value=settings.MaximumActiveUploads Min="0" />
					<MudNumericField Label="Max seed ratio" @bind-Value=settings.SeedLimit Min="0.0" Max="99999.0" />
				</MudStack>
			</MudPaper>
		</MudItem>
		<MudItem xs="12" sm="12">
			<MudPaper Class="pa-4">
				<MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
					@foreach(var error in errors)
				{
					<MudText Color="@Color.Error">@error</MudText>
				}
				<MudDivider/>
				<MudStack>
					<div class="d-flex align-center justify-space-between">
						<MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick=ResetToDefaults>Reset to default</MudButton>
						<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Apply</MudButton>
					</div>
				</MudStack>
			</MudPaper>
		</MudItem>
	</MudGrid>
</MudForm>

@*        <MudPaper Class="pa-4 mt-4">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Validate</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
			<MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
			</MudPaper>
*@

@code {
	bool success = true;
	string[] errors = { };
	MudForm? form = default!;

	private TorrentSettings settings { get; set; } = default!;

	private Converter<System.Net.IPEndPoint> ipendpointconverter = new Converter<System.Net.IPEndPoint>()
		{
			GetFunc = x => { return IPEndPoint.TryParse(x, out var result) ? result : null!; },
			SetFunc = x => { return x == null ? "disabled" : x.ToString(); },
		};

	protected override void OnInitialized()
	{
		settings = TorrentService.Settings;
	}

	private async Task ResetToDefaults()
	{
		settings = new TorrentSettings();
		await form?.Validate();
	}
}
