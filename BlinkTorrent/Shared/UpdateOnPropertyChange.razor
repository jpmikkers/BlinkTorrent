@using System.ComponentModel;
@implements IDisposable

@ChildContent

@code {
	private INotifyPropertyChanged? _item;
	private string? _whitelist;
	private readonly HashSet<string> _splitWhitelist = new();

	[Parameter]
	public INotifyPropertyChanged? Item { get; set; }

	[Parameter]
	public string? Whitelist { get; set; }

	//https://docs.microsoft.com/en-us/dotnet/architecture/blazor-for-web-forms-developers/components
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	private void RegisterEventHandler()
	{
		if(Whitelist != _whitelist)
		{
			_whitelist = Whitelist;

			if(string.IsNullOrWhiteSpace(_whitelist))
			{
				_splitWhitelist.Clear();
			}
			else
			{
				_splitWhitelist.Clear();
				_splitWhitelist.UnionWith(_whitelist.Split(';'));
			}
		}

		if(!object.ReferenceEquals(_item, Item))
		{
			if(_item is not null)
			{
				_item.PropertyChanged -= ItemPropertyChanged;
			}

			_item = Item;

			if(_item is not null)
			{
				_item.PropertyChanged += ItemPropertyChanged;
			}
		}
	}

	protected override void OnParametersSet()
	{
		RegisterEventHandler();
		base.OnParametersSet();
	}

	private async void ItemPropertyChanged(object? sender, PropertyChangedEventArgs e)
	{
		try
		{
			// https://shauncurtis.github.io/posts/Blazor-Async-UI-Events.html
			if(_splitWhitelist.Count == 0 || _splitWhitelist.Contains(e.PropertyName!))
			{
				await InvokeAsync(StateHasChanged);
			}
		}
		catch
		{
		}
	}

	public void Dispose()
	{
		if(_item is not null)
		{
			_item.PropertyChanged -= ItemPropertyChanged;
		}
	}
}
